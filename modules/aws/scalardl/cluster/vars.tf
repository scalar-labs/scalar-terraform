variable "network_name" {
  type        = string
  description = "The name of the network resources: should be generated by provider/universal/name-generator"
}

variable "bastion_ip" {
  type        = string
  description = "The IP to bastion host used for provisioning"
}

variable "resource_type" {
  type        = string
  description = "The resource type of the bastion instance"
}

variable "resource_count" {
  type        = number
  description = "The number of resources to create"
}

variable "security_group_ids" {
  type        = list(string)
  default     = []
  description = "A list of security groups to attach to resources"
}

variable "resource_cluster_name" {
  type        = string
  description = "The name to assign the resource cluster"
}

variable "resource_root_volume_size" {
  type        = number
  description = "The size of resource root volume size"
}

variable "triggers" {
  type        = list(string)
  default     = []
  description = "A trigger key that will initiate provisioning of scalardl resource"
}

variable "private_key_path" {
  type        = string
  description = "The path to the private key for SSH access"
}

variable "user_name" {
  type        = string
  description = "The user name of the remote hosts"
}

variable "subnet_ids" {
  type        = list(string)
  description = "The subnet IDs to launch scalardl hosts"
}

variable "image_id" {
  type        = string
  description = "The image id to initiate"
}

variable "key_name" {
  type        = string
  description = "The key-pair name to assign to cluster resources"
}

variable "network_dns" {
  type        = string
  description = "The ID for the internal DNS zone"
}

variable "scalardl_image_name" {
  type        = string
  description = "The docker image for Scalar DL"
}

variable "scalardl_image_tag" {
  type        = string
  description = "The docker image tag for Scalar DL"
}

variable "enable_tdagent" {
  type        = bool
  default     = true
  description = "A flag to install td-agent that forwards logs to the monitor host"
}

variable "internal_domain" {
  type        = string
  description = "Internal domain"
}

variable "database" {
  type        = string
  description = "The database. cassandra and dynamo are supported."
}

variable "database_contact_points" {
  type        = string
  description = "The database contact points. Specify the region name if the database is dynamo."
}

variable "database_contact_port" {
  type        = string
  description = "The database contact port. Ignored if the database is dynamo."
}

variable "database_username" {
  type        = string
  description = "The database username. Specify AWS_ACCESS_KEY_ID if the database is dynamo."
}

variable "database_password" {
  type        = string
  description = "The database password. Specify AWS_SECRET_ACCESS_KEY if the database is dynamo."
}

variable "cassandra_replication_factor" {
  type        = number
  default     = 3
  description = "The replication factor for the Cassandra schema"
}

variable "auditor_ledger_host" {
  type        = string
  default     = ""
  description = "The port of the ledger (used only if deploying scalar-auditor)"
}

variable "auditor_ledger_port" {
  type        = number
  default     = 50051
  description = "The port of the ledger (used only if deploying scalar-auditor)"
}

variable "auditor_ledger_privileged_port" {
  type        = number
  default     = 50052
  description = "The privileged port of the ledger (used only if deploying scalar-auditor)"
}

variable "auditor_cert_holder_id" {
  type        = string
  default     = "scalar"
  description = "The cert holder ID of Scalar Auditor (used only if deploying scalar-auditor)"
}

variable "auditor_cert_pem" {
  type        = string
  default     = ""
  description = "The cert of Scalar Auditor in PEM format (used only if deploying scalar-auditor)"
}

variable "auditor_private_key_pem" {
  type        = string
  default     = ""
  description = "The private key of Scalar Auditor in PEM format (used only if deploying scalar-auditor)"
}

variable "custom_tags" {
  type        = map(string)
  default     = {}
  description = "The map of custom tags"
}

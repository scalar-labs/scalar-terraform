admin:
  access_log_path: /etc/envoy/admin_access.log
  profile_path: /etc/envoy/envoy.prof
  address:
    socket_address: { address: 0.0.0.0, port_value: 9001 }

{% set envoy_listeners = {'scalar-service': 50051, 'scalar-privileged': 50052} -%}
static_resources:
  listeners:
  {%- for key, value in envoy_listeners.items() %}
    - name: {{ key|e }}
      address:
        socket_address:
          address: 0.0.0.0
          port_value: {{ value|e }}
      filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
              access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog
                    path: "/dev/stdout"
              http_filters:
                - name: envoy.filters.http.grpc_web
                - name: envoy.filters.http.cors
                - name: envoy.filters.http.router
              codec_type: auto
              stat_prefix: ingress_http
              common_http_protocol_options:
                max_connection_duration: 300s
              route_config:
                name: scalar_route
                virtual_hosts:
                  - name: {{ key|e }}
                    domains:
                      - "*"
                    routes:
                      - match:
                          prefix: "/"
                          grpc: {}
                        route:
                          cluster: {{ key|e }}
                      - match:
                          prefix:  "/"
                          headers:
                            - name: "X-User-Agent"
                              prefix_match: "grpc-web-javascript"
                        route:
                          cluster: {{ key|e }}
                    cors:
                      allow_origin_string_match:
                        - safe_regex:
                            google_re2: {}
                            regex: \*
                      allow_methods: GET, PUT, DELETE, POST, OPTIONS
                      allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                      max_age: "1728000"
                      expose_headers: grpc-status,grpc-message,rpc.status-bin
        {%- if envoy_tls is defined and envoy_tls == "true" %}
          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext
              common_tls_context:
                alpn_protocols: h2
                tls_certificates:
                  - certificate_chain:
                      filename: "/etc/envoy/cert.pem"
                    private_key:
                      filename: "/etc/envoy/key.pem"
        {%- endif -%}
  {%- endfor %}
  clusters:
  {%- for key, value in envoy_listeners.items() %}
    - name: {{ key|e }}
      connect_timeout: 0.25s
      type: strict_dns
      http2_protocol_options: {}
      upstream_connection_options:
        tcp_keepalive:
          keepalive_time: 300
      lb_policy: round_robin
      health_checks:
        - timeout: 1s
          interval: 5s
          interval_jitter: 1s
          unhealthy_threshold: 3
          healthy_threshold: 3
          grpc_health_check: {}
      drain_connections_on_host_removal: true
      load_assignment:
        cluster_name: {{ key|e }}
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: scalardl.{{ internal_domain }}
                    port_value: {{ value|e }}
  {%- endfor -%}
